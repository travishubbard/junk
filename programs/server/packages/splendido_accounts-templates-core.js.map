{"version":3,"file":"/packages/splendido:accounts-templates-core.js","sources":["splendido:accounts-templates-core/lib/core.js","splendido:accounts-templates-core/lib/server.js","splendido:accounts-templates-core/lib/methods.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,oF;;AAEA,mC;;AAEA,oF;;AAEA,a;AACA,sC;AACA,0C;AACA,sC;AACA,qC;AACA,mC;AACA,mC;AACA,E;;;AAGA,iD;AACA,c;AACA,gB;AACA,6C;AACA,kD;AACA,yD;AACA,iD;AACA,mD;;AAEA,iB;AACA,mD;AACA,oD;AACA,wC;AACA,8C;;AAEA,6B;AACA,kD;AACA,8C;AACA,gD;AACA,gD;AACA,8C;;AAEA,sC;AACA,uC;AACA,qC;;AAEA,gB;AACA,0C;AACA,4C;;AAEA,Y;AACA,0C;AACA,qC;AACA,E;;;AAGA,iB;AACA,oC;AACA,sC;AACA,0C;AACA,sC;AACA,qC;AACA,mC;AACA,mC;AACA,E;;;AAGA,gB;AACA,a;AACA,gB;AACA,iB;AACA,sC;AACA,oE;AACA,oE;AACA,6C;AACA,6C;AACA,+B;AACA,oD;AACA,mC;;AAEA,6B;AACA,kD;AACA,8C;AACA,gD;AACA,gD;AACA,8C;;AAEA,iB;AACA,kC;AACA,uC;AACA,uC;AACA,E;;AAEA,uD;AACA,iB;AACA,iC;AACA,iC;AACA,qC;AACA,2C;AACA,6E;AACA,E;;;AAGA,oF;;AAEA,2B;;AAEA,oF;;;;AAIA,sB;AACA,sB;AACA,sB;;AAEA,c;AACA,iB;;AAEA,E;;;;;AAKA,E;AACA,iE;AACA,uE;AACA,iE;AACA,sG;AACA,gH;AACA,0G;AACA,0F;AACA,0F;AACA,8E;AACA,2E;AACA,sG;AACA,E;;;;AAIA,E;AACA,4G;AACA,oG;AACA,4F;AACA,4F;AACA,kF;AACA,4E;AACA,kH;AACA,E;;;AAGA,gE;AACA,8B;AACA,wE;AACA,uE;AACA,wE;AACA,uE;AACA,gE;AACA,gE;AACA,qE;AACA,E;;;;AAIA,sB;AACA,4B;AACA,e;AACA,Y;AACA,W;AACA,U;AACA,U;AACA,E;;AAEA,+B;AACA,wB;AACA,iB;AACA,iC;AACA,kC;AACA,qB;AACA,2B;;AAEA,gB;AACA,0B;AACA,gC;AACA,uC;AACA,8B;AACA,iC;;AAEA,6B;AACA,kC;AACA,8B;AACA,gC;AACA,+B;AACA,6B;;AAEA,sC;AACA,0B;AACA,wB;;AAEA,gB;AACA,uB;AACA,uC;AACA,E;;AAEA,+B;AACA,uB;AACA,mB;AACA,yB;AACA,qB;AACA,yB;AACA,E;;AAEA,yB;AACA,yB;AACA,iB;AACA,kB;AACA,mB;AACA,oB;AACA,e;AACA,I;AACA,oB;AACA,qB;AACA,mB;AACA,gB;AACA,G;;AAEA,oB;AACA,yB;;AAEA,kC;;AAEA,wB;AACA,kD;AACA,qD;AACA,E;;AAEA,yC;AACA,qD;AACA,0B;AACA,+G;AACA,4B;AACA,yD;AACA,kE;AACA,4E;AACA,2B;AACA,4C;AACA,oD;AACA,kD;AACA,uE;AACA,wE;AACA,kD;AACA,uE;AACA,wE;AACA,6D;AACA,8H;AACA,mF;;AAEA,yE;AACA,iC;AACA,wB;AACA,E;;AAEA,2C;AACA,W;AACA,0E;AACA,wD;AACA,iB;AACA,qF;AACA,K;AACA,a;AACA,sC;AACA,iC;AACA,iB;AACA,U;AACA,qF;AACA,wB;AACA,E;;AAEA,2C;AACA,8B;AACA,kE;AACA,0B;AACA,4F;;AAEA,wC;AACA,+D;AACA,4D;;AAEA,yB;AACA,8B;AACA,qD;AACA,6E;AACA,yB;AACA,+C;AACA,8D;AACA,K;AACA,E;;AAEA,wD;AACA,yB;AACA,sD;AACA,iE;AACA,0B;AACA,+F;AACA,4C;AACA,uC;AACA,0C;;AAEA,qD;AACA,4D;AACA,mC;AACA,0C;AACA,K;AACA,wC;AACA,mE;AACA,iC;AACA,E;;AAEA,2C;AACA,oC;AACA,E;;AAEA,2C;AACA,uD;AACA,oC;AACA,O;AACA,uD;AACA,E;;AAEA,qC;AACA,wB;AACA,E;;AAEA,uC;AACA,wC;AACA,E;;AAEA,6C;AACA,6B;AACA,uC;AACA,gB;AACA,E;;AAEA,6C;AACA,6B;AACA,uC;AACA,e;AACA,E;;AAEA,wC;AACA,2C;AACA,8G;;AAEA,4C;AACA,gC;AACA,2C;AACA,mG;AACA,I;AACA,2F;AACA,+C;AACA,gB;AACA,uB;AACA,6D;AACA,U;AACA,O;;AAEA,4D;AACA,wD;AACA,gF;;AAEA,4E;AACA,2B;AACA,wD;AACA,sC;AACA,W;AACA,K;;AAEA,6B;AACA,oD;AACA,2B;AACA,O;;AAEA,oB;AACA,E;;AAEA,+D;AACA,2B;AACA,iD;AACA,uC;AACA,e;AACA,oB;AACA,gB;AACA,oB;AACA,+B;AACA,wC;AACA,gB;AACA,6B;AACA,S;AACA,Y;AACA,wB;AACA,K;AACA,mC;AACA,oC;AACA,6C;AACA,sD;AACA,oC;AACA,6C;AACA,qD;AACA,0D;AACA,4B;AACA,wD;AACA,4B;AACA,iB;AACA,E;;AAEA,8C;AACA,uD;AACA,0B;AACA,kH;AACA,gD;AACA,iE;AACA,qB;AACA,sC;AACA,Q;AACA,2E;AACA,8E;AACA,E;;AAEA,uC;AACA,yB;AACA,kH;AACA,4G;AACA,oI;AACA,iD;AACA,oD;AACA,0D;AACA,qE;AACA,8D;AACA,c;AACA,S;AACA,iD;AACA,yD;AACA,0D;AACA,0E;AACA,8D;AACA,c;AACA,S;AACA,+C;AACA,uD;AACA,wD;AACA,wE;AACA,8D;AACA,c;AACA,S;AACA,K;;AAEA,2B;AACA,kE;AACA,yF;AACA,qG;AACA,2F;AACA,uG;AACA,4F;AACA,wG;AACA,8F;AACA,2G;AACA,iI;AACA,a;;AAEA,2D;AACA,2D;AACA,gE;AACA,yF;;AAEA,4C;AACA,iF;AACA,uC;AACA,6C;AACA,sC;AACA,mC;AACA,2C;AACA,uD;AACA,wD;AACA,gE;AACA,+D;AACA,wE;AACA,qE;AACA,8F;AACA,qG;AACA,mC;AACA,+B;AACA,0B;AACA,yD;AACA,8D;AACA,0B;AACA,4C;AACA,2D;AACA,yB;AACA,uB;AACA,iB;AACA,oB;AACA,sC;AACA,mC;AACA,2C;AACA,uD;AACA,yD;AACA,8D;AACA,0B;AACA,2C;AACA,kF;AACA,0B;AACA,4C;AACA,2D;AACA,gE;AACA,yB;AACA,uB;AACA,a;AACA,gB;AACA,kC;AACA,+B;AACA,uC;AACA,mD;AACA,qD;AACA,0D;AACA,sB;AACA,wC;AACA,uD;AACA,qB;AACA,mB;AACA,iB;AACA,O;AACA,E;;;;;;;;;;;;;;;;;;AC9gBA,iB;AACA,gC;AACA,0B;AACA,e;;AAEA,6D;AACA,6E;AACA,qF;;AAEA,4C;AACA,6C;AACA,kB;AACA,8D;AACA,qC;AACA,sE;;AAEA,kE;AACA,uD;AACA,6C;AACA,uC;AACA,4B;AACA,0F;AACA,uC;AACA,8D;AACA,e;AACA,mC;AACA,oE;AACA,sB;AACA,iC;AACA,yC;AACA,sG;AACA,c;AACA,yB;AACA,gC;AACA,gG;AACA,S;AACA,K;AACA,S;AACA,wB;AACA,gE;AACA,6E;AACA,K;;AAEA,6E;AACA,qC;AACA,4C;AACA,sF;AACA,oB;AACA,0C;AACA,6D;AACA,qC;AACA,sE;AACA,c;AACA,wB;AACA,wD;AACA,wD;AACA,2B;AACA,4E;AACA,kF;AACA,6B;AACA,oC;AACA,yE;AACA,uE;AACA,a;AACA,c;AACA,W;AACA,K;;AAEA,qB;AACA,0C;AACA,wD;AACA,+B;AACA,kD;AACA,mF;AACA,mE;AACA,a;AACA,mC;AACA,W;AACA,K;;AAEA,mB;AACA,oC;AACA,M;AACA,kE;AACA,+B;AACA,+C;AACA,2B;AACA,gC;AACA,qC;AACA,oD;AACA,6E;AACA,kB;AACA,gB;AACA,W;AACA,mB;AACA,oC;;AAEA,6C;AACA,6B;AACA,E;;AAEA,6B;;;AAGA,uD;AACA,iD;AACA,wD;AACA,E;AACA,gC;AACA,2C;AACA,S;AACA,iB;AACA,qC;AACA,G;;;;;;;;;;;;;;;;;;;AChHA,gB;AACA,4C;AACA,iC;AACA,oB;AACA,oD;AACA,iF;AACA,kC;AACA,0F;AACA,2B;AACA,mD;AACA,yD;AACA,S;AACA,M;AACA,G;;;AAGA,sB;AACA,oB;AACA,8C;AACA,sE;AACA,4F;AACA,+C;AACA,mC;AACA,8D;AACA,sD;AACA,0C;AACA,mD;AACA,uE;AACA,sC;AACA,8C;AACA,iC;AACA,uD;AACA,8B;AACA,iD;AACA,iC;AACA,uD;AACA,sC;AACA,kC;;AAEA,sC;AACA,kD;AACA,gD;AACA,4C;AACA,kD;AACA,6E;AACA,iE;AACA,yC;AACA,2B;AACA,iB;AACA,8F;AACA,oC;AACA,8D;AACA,qC;AACA,iB;AACA,e;AACA,0B;AACA,mF;;AAEA,iD;AACA,2C;AACA,uC;;AAEA,yD;AACA,sD;AACA,oF;AACA,yE;AACA,yB;AACA,wE;;AAEA,4E;AACA,yE;AACA,4B;AACA,iF;AACA,sE;;AAEA,gE;AACA,uC;AACA,U;AACA,O;AACA,C","sourcesContent":["// ---------------------------------------------------------------------------------\n\n// Patterns for methods\" parameters\n\n// ---------------------------------------------------------------------------------\n\nSTATE_PAT = {\n    changePwd: Match.Optional(String),\n    enrollAccount: Match.Optional(String),\n    forgotPwd: Match.Optional(String),\n    resetPwd: Match.Optional(String),\n    signIn: Match.Optional(String),\n    signUp: Match.Optional(String),\n};\n\n\n// Configuration pattern to be checked with check\nCONFIG_PAT = {\n    // Behaviour\n    confirmPassword: Match.Optional(Boolean),\n    enablePasswordChange: Match.Optional(Boolean),\n    forbidClientAccountCreation: Match.Optional(Boolean),\n    overrideLoginErrors: Match.Optional(Boolean),\n    sendVerificationEmail: Match.Optional(Boolean),\n\n    // Appearance\n    showAddRemoveServices: Match.Optional(Boolean),\n    showForgotPasswordLink: Match.Optional(Boolean),\n    showLabels: Match.Optional(Boolean),\n    showPlaceholders: Match.Optional(Boolean),\n\n    // Client-side Validation\n    continuousValidation: Match.Optional(Boolean),\n    negativeFeedback: Match.Optional(Boolean),\n    negativeValidation: Match.Optional(Boolean),\n    positiveValidation: Match.Optional(Boolean),\n    positiveFeedback: Match.Optional(Boolean),\n\n    // Privacy Policy and Terms of Use\n    privacyUrl: Match.Optional(String),\n    termsUrl: Match.Optional(String),\n\n    // Redirects\n    homeRoutePath: Match.Optional(String),\n    redirectTimeout: Match.Optional(Number),\n\n    // Texts\n    buttonText: Match.Optional(STATE_PAT),\n    title: Match.Optional(STATE_PAT),\n};\n\n\nFIELD_SUB_PAT = {\n    default: Match.Optional(String),\n    changePwd: Match.Optional(String),\n    enrollAccount: Match.Optional(String),\n    forgotPwd: Match.Optional(String),\n    resetPwd: Match.Optional(String),\n    signIn: Match.Optional(String),\n    signUp: Match.Optional(String),\n};\n\n\n// Field pattern\nFIELD_PAT = {\n    _id: String,\n    type: String,\n    required: Match.Optional(Boolean),\n    displayName: Match.Optional(Match.OneOf(String, FIELD_SUB_PAT)),\n    placeholder: Match.Optional(Match.OneOf(String, FIELD_SUB_PAT)),\n    minLength: Match.Optional(Match.Integer),\n    maxLength: Match.Optional(Match.Integer),\n    re: Match.Optional(RegExp),\n    func: Match.Optional(Match.Where(_.isFunction)),\n    errStr: Match.Optional(String),\n\n    // Client-side Validation\n    continuousValidation: Match.Optional(Boolean),\n    negativeFeedback: Match.Optional(Boolean),\n    negativeValidation: Match.Optional(Boolean),\n    positiveValidation: Match.Optional(Boolean),\n    positiveFeedback: Match.Optional(Boolean),\n\n    // Transforms\n    trim: Match.Optional(Boolean),\n    lowercase: Match.Optional(Boolean),\n    uppercase: Match.Optional(Boolean),\n};\n\n// Route configuration pattern to be checked with check\nvar ROUTE_PAT = {\n    name: Match.Optional(String),\n    path: Match.Optional(String),\n    template: Match.Optional(String),\n    layoutTemplate: Match.Optional(String),\n    redirect: Match.Optional(Match.OneOf(String, Match.Where(_.isFunction))),\n};\n\n\n// ---------------------------------------------------------------------------------\n\n// AccountsTemplates object\n\n// ---------------------------------------------------------------------------------\n\n\n\n// -------------------\n// Client/Server stuff\n// -------------------\n\n// Constructor\nAT = function() {\n\n};\n\n\n\n\n/*\n    Each field object is represented by the following properties:\n        _id:         String   (required)  // A unique field\"s id / name\n        type:        String   (required)  // Displayed input type\n        required:    Boolean  (optional)  // Specifies Whether to fail or not when field is left empty\n        displayName: String   (optional)  // The field\"s name to be displayed as a label above the input element\n        placeholder: String   (optional)  // The placeholder text to be displayed inside the input element\n        minLength:   Integer  (optional)  // Possibly specifies the minimum allowed length\n        maxLength:   Integer  (optional)  // Possibly specifies the maximum allowed length\n        re:          RegExp   (optional)  // Regular expression for validation\n        func:        Function (optional)  // Custom function for validation\n        errStr:      String   (optional)  // Error message to be displayed in case re validation fails\n*/\n\n\n\n/*\n    Routes configuration can be done by calling AccountsTemplates.configureRoute with the route name and the\n    following options in a separate object. E.g. AccountsTemplates.configureRoute(\"gingIn\", option);\n        name:           String (optional). A unique route\"s name to be passed to iron-router\n        path:           String (optional). A unique route\"s path to be passed to iron-router\n        template:       String (optional). The name of the template to be rendered\n        layoutTemplate: String (optional). The name of the layout to be used\n        redirect:       String (optional). The name of the route (or its path) where to redirect after form submit\n*/\n\n\n// Allowed routes along with theirs default configuration values\nAT.prototype.ROUTE_DEFAULT = {\n    changePwd:     { name: \"atChangePwd\",     path: \"/change-password\"},\n    enrollAccount: { name: \"atEnrollAccount\", path: \"/enroll-account\"},\n    forgotPwd:     { name: \"atForgotPwd\",     path: \"/forgot-password\"},\n    resetPwd:      { name: \"atResetPwd\",      path: \"/reset-password\"},\n    signIn:        { name: \"atSignIn\",        path: \"/sign-in\"},\n    signUp:        { name: \"atSignUp\",        path: \"/sign-up\"},\n    verifyEmail:   { name: \"atVerifyEmail\",   path: \"/verify-email\"},\n};\n\n\n\n// Allowed input types\nAT.prototype.INPUT_TYPES = [\n    \"password\",\n    \"email\",\n    \"text\",\n    \"tel\",\n    \"url\",\n];\n\n// Current configuration values\nAT.prototype.options = {\n    // Appearance\n    showAddRemoveServices: false,\n    showForgotPasswordLink: false,\n    showLabels: true,\n    showPlaceholders: true,\n\n    // Behaviour\n    confirmPassword: true,\n    enablePasswordChange: false,\n    forbidClientAccountCreation: false,\n    overrideLoginErrors: true,\n    sendVerificationEmail: false,\n\n    // Client-side Validation\n    //continuousValidation: false,\n    //negativeFeedback: false,\n    //negativeValidation: false,\n    //positiveValidation: true,\n    //positiveFeedback: true,\n\n    // Privacy Policy and Terms of Use\n    privacyUrl: undefined,\n    termsUrl: undefined,\n\n    // Redirects\n    homeRoutePath: \"/\",\n    redirectTimeout: 2000, // 2 seconds\n};\n\nAT.prototype.SPECIAL_FIELDS = [\n    \"current_password\",\n    \"new_password\",\n    \"new_password_again\",\n    \"password_again\",\n    \"username_and_email\",\n];\n\n// SignIn / SignUp fields\nAT.prototype._fields = [{\n    _id: \"email\",\n    type: \"email\",\n    required: true,\n    lowercase: true,\n    trim: true,\n}, {\n    _id: \"password\",\n    type: \"password\",\n    required: true,\n    minLength: 6\n}];\n\n// Configured routes\nAT.prototype.routes = {};\n\nAT.prototype._initialized = false;\n\n// Input type validation\nAT.prototype._isValidInputType = function(value) {\n    return _.indexOf(this.INPUT_TYPES, value) !== -1;\n};\n\nAT.prototype.addField = function(field) {\n    // Fields can be added only before initialization\n    if (this._initialized)\n        throw new Error(\"AccountsTemplates.addField should strictly be called before AccountsTemplates.init!\");\n    check(field, FIELD_PAT);\n    // Checks there\"s currently no field called field._id\n    if (_.indexOf(_.pluck(this._fields, \"_id\"), field._id) !== -1)\n        throw new Error(\"A field called \" + field._id + \" already exists!\");\n    // Validates field.type\n    if (!this._isValidInputType(field.type))\n        throw new Error(\"field.type is not valid!\");\n    // Checks field.minLength is strictly positive\n    if (typeof field.minLength !== \"undefined\" && field.minLength <= 0)\n        throw new Error(\"field.minLength should be greater than zero!\");\n    // Checks field.maxLength is strictly positive\n    if (typeof field.maxLength !== \"undefined\" && field.maxLength <= 0)\n        throw new Error(\"field.maxLength should be greater than zero!\");\n    // Checks field.maxLength is greater than field.minLength\n    if (typeof field.minLength !== \"undefined\" && typeof field.minLength !== \"undefined\" && field.maxLength < field.minLength)\n        throw new Error(\"field.maxLength should be greater than field.maxLength!\");\n\n    if (!(Meteor.isServer && _.contains(this.SPECIAL_FIELDS, field._id)))\n        this._fields.push(field);\n    return this._fields;\n};\n\nAT.prototype.addFields = function(fields) {\n    var ok;\n    try { // don\"t bother with `typeof` - just access `length` and `catch`\n        ok = fields.length > 0 && \"0\" in Object(fields);\n    } catch (e) {\n        throw new Error(\"field argument should be an array of valid field objects!\");\n    }\n    if (ok) {\n        _.map(fields, function(field){\n            this.addField(field);\n        }, this);\n    } else\n        throw new Error(\"field argument should be an array of valid field objects!\");\n    return this._fields;\n};\n\nAT.prototype.configure = function(config) {\n    check(config, CONFIG_PAT);\n    // Configuration options can be set only before initialization\n    if (this._initialized)\n        throw new Error(\"Configuration options must be set before AccountsTemplates.init!\");\n\n    // Updates the current configuration\n    var normal_options = _.omit(config, \"title\", \"buttonText\");\n    this.options = _.defaults(normal_options, this.options);\n\n    if (Meteor.isClient){\n        if (config.buttonText)\n            // Updates the current buttonTexts object\n            this.buttonText = _.defaults(config.buttonText, this.buttonText);\n        if (config.title)\n            // Updates the current title object\n            this.title = _.defaults(config.title, this.title);\n    }\n};\n\nAT.prototype.configureRoute = function(route, options) {\n    check(route, String);\n    check(options, Match.OneOf(undefined, ROUTE_PAT));\n    // Route Configuration can be done only before initialization\n    if (this._initialized)\n        throw new Error(\"Route Configuration can be done only before AccountsTemplates.init!\");\n    // Only allowed routes can be configured\n    if (!(route in this.ROUTE_DEFAULT))\n        throw new Error(\"Unknown Route!\");\n\n    // Possibly adds a initial / to the provided path\n    if (options && options.path && options.path[0] !== \"/\"){\n        options = _.clone(options);\n        options.path = \"/\" + options.path;\n    }\n    // Updates the current configuration\n    options = _.defaults(options || {}, this.ROUTE_DEFAULT[route]);\n    this.routes[route] = options;\n};\n\nAT.prototype.hasField = function(fieldId) {\n    return !!this.getField(fieldId);\n};\n\nAT.prototype.getField = function(fieldId) {\n    var field = _.filter(this._fields, function(field){\n        return field._id == fieldId;\n    });\n    return (field.length === 1) ? field[0] : undefined;\n};\n\nAT.prototype.getFields = function() {\n    return this._fields;\n};\n\nAT.prototype.getFieldIds = function() {\n    return _.pluck(this._fields, \"_id\");\n};\n\nAT.prototype.getRouteName = function(route) {\n    if (route in this.routes)\n        return this.routes[route].name;\n    return null;\n};\n\nAT.prototype.getRoutePath = function(route) {\n    if (route in this.routes)\n        return this.routes[route].path;\n    return \"#\";\n};\n\nAT.prototype.oauthServices = function(){\n    // Extracts names of available services\n    var names = (Accounts.oauth && Accounts.loginServicesConfigured() && Accounts.oauth.serviceNames()) || [];\n\n    // Extracts names of configured services\n    var configuredServices = [];\n    if (Accounts.loginServiceConfiguration)\n        configuredServices = _.pluck(Accounts.loginServiceConfiguration.find().fetch(), \"service\");\n    \n    // Builds a list of objects containing service name as _id and its configuration status\n    var services = _.map(names, function(name){\n        return {\n            _id : name,\n            configured: _.contains(configuredServices, name),\n        };\n    });\n\n    // Checks whether there is a UI to configure services...\n    // XXX: this only works with the accounts-ui package\n    var showUnconfigured = typeof Accounts._loginButtonsSession !== \"undefined\";\n\n    // Filters out unconfigured services in case they\"re not to be displayed\n    if (!showUnconfigured){\n        services = _.filter(services, function(service){\n            return service.configured;\n        });\n    }\n\n    // Sorts services by name\n    services = _.sortBy(services, function(service){\n        return service._id;\n    });\n\n    return services;\n};\n\nAT.prototype.validateField = function(fieldId, value, strict) {\n    check(fieldId, String);\n    check(value, Match.OneOf(undefined, String));\n    var field = this.getField(fieldId);\n    if (!field)\n        return null;\n    if (!value){\n        if (strict){\n            if (field.required)\n                return \"Required Field\";\n            else\n                return false;\n        }\n        else\n            return null;\n    }\n    var valueLength = value.length;\n    var minLength = field.minLength;\n    if (minLength && valueLength < minLength)\n        return \"Minimum Required Length:\" + minLength;\n    var maxLength = field.maxLength;\n    if (maxLength && valueLength > maxLength)\n        return \"Maximum Allowed Length:\" + maxLength;\n    if (field.re && valueLength && !value.match(field.re))\n        return field.errStr;\n    if (field.func && valueLength && !field.func(value))\n        return field.errStr;\n    return false;\n};\n\nAT.prototype.removeField = function(fieldId) {\n    // Fields can be removed only before initialization\n    if (this._initialized)\n        throw new Error(\"AccountsTemplates.removeField should strictly be called before AccountsTemplates.init!\");\n    // Tries to look up the field with given _id\n    var index = _.indexOf(_.pluck(this._fields, \"_id\"), fieldId);\n    if (index !== -1)\n        this._fields.splice(index, 1);\n    else\n        if (!(Meteor.isServer && _.contains(this.SPECIAL_FIELDS, fieldId)))\n            throw new Error(\"A field called \" + fieldId + \" does not exist!\");\n};\n\nAT.prototype.setupRoutes = function() {\n    if (Meteor.isServer){\n        // Possibly prints a warning in case showForgotPasswordLink is set to true but the route is not configured\n        if (AccountsTemplates.options.showForgotPasswordLink && !(\"forgotPwd\" in  AccountsTemplates.routes))\n            console.warn(\"AccountsTemplates - WARNING: showForgotPasswordLink set to true, but forgotPwd route is not configured!\");\n        // Configures \"reset password\" email link\n        if (\"resetPwd\" in AccountsTemplates.routes){\n            Accounts.urls.resetPassword = function(token){\n                var path = AccountsTemplates.routes[\"resetPwd\"].path;\n                return Meteor.absoluteUrl(path + \"/\" + token);\n            };\n        }\n        // Configures \"enroll account\" email link\n        if (\"enrollAccount\" in AccountsTemplates.routes){\n            Accounts.urls.enrollAccount = function(token){\n                var path = AccountsTemplates.routes[\"enrollAccount\"].path;\n                return Meteor.absoluteUrl(path + \"/\" + token);\n            };\n        }\n        // Configures \"verify email\" email link\n        if (\"verifyEmail\" in AccountsTemplates.routes){\n            Accounts.urls.verifyEmail = function(token){\n                var path = AccountsTemplates.routes[\"verifyEmail\"].path;\n                return Meteor.absoluteUrl(path + \"/\" + token);\n            };\n        }\n    }\n\n    Router.map(function() {\n        _.each(AccountsTemplates.routes, function(options, route){\n            if (route === \"changePwd\" && !AccountsTemplates.options.enablePasswordChange)\n                throw new Error(\"changePwd route configured but enablePasswordChange set to false!\");\n            if (route === \"forgotPwd\" && !AccountsTemplates.options.showForgotPasswordLink)\n                throw new Error(\"forgotPwd route configured but showForgotPasswordLink set to false!\");\n            if (route === \"signUp\" && AccountsTemplates.options.forbidClientAccountCreation)\n                throw new Error(\"signUp route configured but forbidClientAccountCreation set to true!\");\n            // Possibly prints a warning in case the MAIL_URL environment variable was not set\n            if (Meteor.isServer && route === \"forgotPwd\" && (!process.env.MAIL_URL || ! Package[\"email\"])){\n                console.warn(\"AccountsTemplates - WARNING: showForgotPasswordLink set to true, but MAIL_URL is not configured!\");\n            }\n\n            var name = options.name; // Default provided...\n            var path = options.path; // Default provided...\n            var template = options.template || \"fullPageAtForm\";\n            var layoutTemplate = options.layoutTemplate || Router.options.layoutTemplate;\n\n            // Possibly adds token parameter\n            if (_.contains([\"enrollAccount\", \"resetPwd\", \"verifyEmail\"], route)){\n                path += \"/:paramToken\";\n                if (route === \"verifyEmail\"){\n                    this.route(name, {\n                        path: path,\n                        template: template,\n                        layoutTemplate: layoutTemplate,\n                        onAfterAction: function(pause) {\n                            AccountsTemplates.setDisabled(true);\n                            var token = this.params.paramToken;\n                            Accounts.verifyEmail(token, function(error){\n                                AccountsTemplates.setDisabled(false);\n                                AccountsTemplates.submitCallback(error, undefined, function(){\n                                    AccountsTemplates.state.form.set(\"result\", \"info.emailVerified\");\n                                });\n                            });\n                        },\n                        onBeforeAction: function(pause) {\n                            AccountsTemplates.setState(route);\n                        },\n                        onStop: function() {\n                            AccountsTemplates.clearState();\n                        }\n                    });\n                }\n                else\n                    this.route(name, {\n                        path: path,\n                        template: template,\n                        layoutTemplate: layoutTemplate,\n                        onBeforeAction: function(pause) {\n                            AccountsTemplates.setState(route);\n                        },\n                        onRun: function() {\n                            AccountsTemplates.paramToken = this.params.paramToken;\n                        },\n                        onStop: function() {\n                            AccountsTemplates.clearState();\n                            AccountsTemplates.paramToken = null;\n                        }\n                    });\n            }\n            else\n                this.route(name, {\n                    path: path,\n                    template: template,\n                    layoutTemplate: layoutTemplate,\n                    onBeforeAction: function(pause) {\n                        AccountsTemplates.setState(route);\n                    },\n                    onStop: function() {\n                        AccountsTemplates.clearState();\n                    }\n                });\n        }, this);\n    });\n};","// Initialization\nAT.prototype.init = function() {\n    if (this._initialized)\n        return;\n\n    // Checks there is at least one account service installed\n    if (!Package[\"accounts-password\"] && (this.oauthServices().length === 0))\n        throw Error(\"AccountsTemplates: You must add at least one account service!\");\n\n    // A password field is strictly required\n    var password = this.getField(\"password\");\n    if (!password)\n        throw Error(\"A password field is strictly required!\");\n    if (password.type !== \"password\")\n        throw Error(\"The type of password field should be password!\");\n\n    // Then we can have \"username\" or \"email\" or even both of them\n    // but at least one of the two is strictly required\n    var username = this.getField(\"username\");\n    var email = this.getField(\"email\");\n    if (!username && !email)\n        throw Error(\"At least one field out of username and email is strictly required!\");\n    if (username && !username.required)\n        throw Error(\"The username field should be required!\");\n    if (email){\n        if (email.type !== \"email\")\n            throw Error(\"The type of email field should be email!\");\n        if (username){\n            // username and email\n            if (username.type !== \"text\")\n                throw Error(\"The type of username field should be text when email field is present!\");\n        }else{\n            // email only\n            if (!email.required)\n                throw Error(\"The email field should be required when username is not present!\");\n        }\n    }\n    else{\n        // username only\n        if (username.type !== \"text\" && username.type !== \"tel\")\n            throw Error(\"The type of username field should be text or tel!\");\n    }\n\n    // Possibly publish more user data in order to be able to show add/remove\n    // buttons for 3rd-party services\n    if (this.options.showAddRemoveServices){\n        // Publish additional current user info to get the list of registered services\n        // XXX TODO:\n        // ...adds only user.services.*.id\n        Meteor.publish(\"userRegisteredServices\", function() {\n            var userId = this.userId;\n            return Meteor.users.find(userId, {fields: {services: 1}});\n            /*\n            if (userId){\n                var user = Meteor.users.findOne(userId);\n                var services_id = _.chain(user.services)\n                    .keys()\n                    .reject(function(service){return service === \"resume\";})\n                    .map(function(service){return \"services.\" + service + \".id\";})\n                    .value();\n                var projection = {};\n                _.each(services_id, function(key){projection[key] = 1;});\n                return Meteor.users.find(userId, {fields: projection});\n            }\n            */\n        });\n    }\n\n    // Security stuff\n    if (this.options.overrideLoginErrors){\n        Accounts.validateLoginAttempt(function(attempt){\n            if (attempt.error){\n                var reason = attempt.error.reason;\n                if (reason === \"User not found\" || reason === \"Incorrect password\")\n                    throw new Meteor.Error(403, \"Login forbidden\");\n            }\n            return attempt.allowed;\n        });\n    }\n\n    // ------------\n    // Server-Side Routes Definition\n    //\n    //   this allows for server-side iron-router usage, like, e.g.\n    //   Router.map(function(){\n    //       this.route(\"fullPageSigninForm\", {\n    //           path: \"*\",\n    //           where: \"server\"\n    //           action: function() {\n    //               this.response.statusCode = 404;\n    //               return this.response.end(Handlebars.templates[\"404\"]());\n    //           }\n    //       });\n    //   })\n    // ------------\n    AccountsTemplates.setupRoutes();\n\n    // Marks AccountsTemplates as initialized\n    this._initialized = true;\n};\n\nAccountsTemplates = new AT();\n\n\n// Client side account creation is disabled by default:\n// the methos ATCreateUserServer is used instead!\n// to actually disable client side account creation use:\n//\n//    AccountsTemplates.config({\n//        forbidClientAccountCreation: true\n//    });\nAccounts.config({\n    forbidClientAccountCreation: true\n});","\nMeteor.methods({\n    ATRemoveService: function(service_name){\n        var userId = this.userId;\n        if (userId){\n            var user = Meteor.users.findOne(userId);\n            var numServices = _.keys(user.services).length; // including \"resume\"\n            if (numServices === 2)\n                throw new Meteor.Error(403, \"Cannot remove the only active service!\", {});\n            var unset = {};\n            unset[\"services.\" + service_name] = \"\";\n            Meteor.users.update(userId, {$unset: unset});\n        }\n    },\n});\n\n\nif (Meteor.isServer) {\n    Meteor.methods({\n        ATCreateUserServer: function(options){\n            if (AccountsTemplates.options.forbidClientAccountCreation)\n                throw new Meteor.Error(403, \"Client side accounts creation is disabled!!!\");\n            // createUser() does more checking.\n            check(options, Object);\n            var allFieldIds = AccountsTemplates.getFieldIds();\n            // Picks-up whitelisted fields for profile\n            var profile = options.profile;\n            profile = _.pick(profile, allFieldIds);\n            profile = _.omit(profile, \"username\", \"email\", \"password\");\n            // Validates fields\" value\n            var signupInfo = _.clone(profile);\n            if (options.username)\n                signupInfo.username = options.username;\n            if (options.email)\n                signupInfo.email = options.email;\n            if (options.password)\n                signupInfo.password = options.password;\n            var validationErrors = {};\n            var someError = false;\n\n            // Validates fields values\n            _.each(allFieldIds, function(fieldId){\n                var value = signupInfo[fieldId];\n                if (fieldId === \"password\"){\n                    // Can\"t Pick-up password here\n                    // NOTE: at this stage the password is already encripted,\n                    //       so there is no way to validate it!!!\n                    check(value, Object);\n                    return;\n                }\n                var validationErr = AccountsTemplates.validateField(fieldId, value, \"strict\");\n                if (validationErr) {\n                    validationErrors[fieldId] = validationErr;\n                    someError = true;\n                }\n            });\n            if (someError)\n                throw new Meteor.Error(403, \"Validation Errors\", validationErrors);\n\n            // Possibly removes the profile field\n            if (_.isEmpty(options.profile))\n                delete options.profile;\n\n            // Create user. result contains id and token.\n            var userId = Accounts.createUser(options);\n            // safety belt. createUser is supposed to throw on error. send 500 error\n            // instead of sending a verification email with empty userid.\n            if (! userId)\n                throw new Error(\"createUser failed to insert new user\");\n\n            // If `Accounts._options.sendVerificationEmail` is set, register\n            // a token to verify the user\"s primary email, and send it to\n            // that address.\n            if (options.email && AccountsTemplates.options.sendVerificationEmail)\n                Accounts.sendVerificationEmail(userId, options.email);\n\n            // client gets logged in as the new user afterwards.\n            // return {userId: userId};\n        },\n    });\n}"]}